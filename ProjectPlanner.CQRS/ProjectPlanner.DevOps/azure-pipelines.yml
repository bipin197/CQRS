trigger:
  branches:
    include:
    - main
  paths:
    include:
    - ProjectPlanner.Api/*
    - ProjectPlanner.Commands/*
    - ProjectPlanner.Queries/*
    - ProjectPlanner.Domain/*

variables:
  - group: aws-credentials # Will be created in Infrastructure stage
  - name: AWS_REGION
    value: 'us-east-1'
  - name: ECR_REPOSITORY
    value: 'projectplanner-api'
  - name: IMAGE_TAG
    value: '$(Build.BuildNumber)'
  - name: AZURE_DEVOPS_PAT
    value: '$(System.AccessToken)' # Built-in Azure DevOps PAT

stages:
- stage: Infrastructure
  displayName: 'Setup Infrastructure'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  jobs:
  - job: SetupInfrastructure
    displayName: 'Create ECR and Variable Group'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AWSShellScript@1
      name: createEcr
      inputs:
        awsCredentials: 'AWS'
        regionName: $(AWS_REGION)
        scriptType: 'inline'
        inlineScript: |
          # Check if repository exists
          if ! aws ecr describe-repositories --repository-names $(ECR_REPOSITORY) --region $(AWS_REGION) 2>/dev/null; then
            # Create ECR repository
            aws ecr create-repository --repository-name $(ECR_REPOSITORY) --region $(AWS_REGION)
            
            # Enable image scanning
            aws ecr put-image-scanning-configuration \
              --repository-name $(ECR_REPOSITORY) \
              --image-scanning-configuration scanOnPush=true \
              --region $(AWS_REGION)
            
            # Set lifecycle policy
            POLICY='{
              "rules": [{
                "rulePriority": 1,
                "description": "Remove untagged images older than 14 days",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 14
                },
                "action": {
                  "type": "expire"
                }
              }]
            }'
            
            aws ecr put-lifecycle-policy \
              --repository-name $(ECR_REPOSITORY) \
              --lifecycle-policy-text "$POLICY" \
              --region $(AWS_REGION)
          fi

    - task: PowerShell@2
      name: createVariableGroup
      inputs:
        targetType: 'inline'
        script: |
          $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$env:AZURE_DEVOPS_PAT"))
          
          $headers = @{
              Authorization = "Basic $base64AuthInfo"
              'Content-Type' = 'application/json'
          }
          
          $variableGroup = @{
              name = "aws-credentials"
              type = "Vsts"
              variables = @{
                  AWS_ACCESS_KEY_ID = @{
                      value = $env:AWS_ACCESS_KEY_ID
                      isSecret = $true
                  }
                  AWS_SECRET_ACCESS_KEY = @{
                      value = $env:AWS_SECRET_ACCESS_KEY
                      isSecret = $true
                  }
                  AWS_ACCOUNT_ID = @{
                      value = $env:AWS_ACCOUNT_ID
                      isSecret = $false
                  }
              }
          }
          
          $jsonBody = $variableGroup | ConvertTo-Json -Depth 10
          
          $organization = $env:SYSTEM_COLLECTIONURI
          $project = $env:SYSTEM_TEAMPROJECT
          
          $apiUrl = "${organization}${project}/_apis/distributedtask/variablegroups?api-version=7.1-preview.2"
          
          try {
              $existingGroups = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Get
              $exists = $existingGroups.value | Where-Object { $_.name -eq "aws-credentials" }
              
              if (-not $exists) {
                  $response = Invoke-RestMethod -Uri $apiUrl -Method Post -Headers $headers -Body $jsonBody
                  Write-Host "Variable group 'aws-credentials' created successfully with ID: $($response.id)"
              } else {
                  Write-Host "Variable group 'aws-credentials' already exists with ID: $($exists.id)"
              }
          }
          catch {
              Write-Error "Failed to manage variable group: $_"
              exit 1
          }
      env:
        AZURE_DEVOPS_PAT: $(System.AccessToken)
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_ACCOUNT_ID: $(AWS_ACCOUNT_ID)

- stage: Build
  displayName: 'Build and Push'
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push Docker Image'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet
      displayName: 'Install .NET 8 SDK'

    - task: AWSShellScript@1
      inputs:
        awsCredentials: 'AWS'  # AWS Service Connection name
        regionName: $(AWS_REGION)
        scriptType: 'inline'
        inlineScript: |
          aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com
      displayName: 'Login to ECR'
      env:
        AWS_ACCOUNT_ID: $(AWS_ACCOUNT_ID)

    - task: Docker@2
      inputs:
        command: 'build'
        Dockerfile: '**/ProjectPlanner.Api/Dockerfile'
        buildContext: '$(Build.SourcesDirectory)'
        tags: |
          $(ECR_REPOSITORY):$(IMAGE_TAG)
          $(ECR_REPOSITORY):latest
      displayName: 'Build Docker Image'

    - task: AWSShellScript@1
      inputs:
        awsCredentials: 'AWS'  # AWS Service Connection name
        regionName: $(AWS_REGION)
        scriptType: 'inline'
        inlineScript: |
          # Tag and push image with build number
          docker tag $(ECR_REPOSITORY):$(IMAGE_TAG) $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_REPOSITORY):$(IMAGE_TAG)
          docker push $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_REPOSITORY):$(IMAGE_TAG)
          
          # Tag and push as latest
          docker tag $(ECR_REPOSITORY):$(IMAGE_TAG) $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_REPOSITORY):latest
          docker push $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com/$(ECR_REPOSITORY):latest
      displayName: 'Push to ECR'
      env:
        AWS_ACCOUNT_ID: $(AWS_ACCOUNT_ID)
