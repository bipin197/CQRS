trigger:
  branches:
    include:
    - master
  paths:
    include:
    - ProjectPlanner.Api/*
    - ProjectPlanner.Commands/*
    - ProjectPlanner.Queries/*
    - ProjectPlanner.Domain/*

variables:
  - name: AWS_REGION
    value: 'ap-south-1'
  - name: ECR_REPOSITORY
    value: 'projectplanner-api'
  - name: IMAGE_TAG
    value: '$(Build.BuildNumber)'

stages:
- stage: Infrastructure
  displayName: 'Setup Infrastructure'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  jobs:
  - job: SetupInfrastructure
    displayName: 'Create ECR and Variable Group'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AWSShellScript@1
      name: createEcr
      inputs:
        awsCredentials: 'AWS'
        regionName: $(AWS_REGION)
        scriptType: 'inline'
        inlineScript: |
          # Check if repository exists
          if ! aws ecr describe-repositories --repository-names $(ECR_REPOSITORY) --region $(AWS_REGION) 2>/dev/null; then
            # Create ECR repository
            aws ecr create-repository --repository-name $(ECR_REPOSITORY) --region $(AWS_REGION)
            
            # Enable image scanning
            aws ecr put-image-scanning-configuration \
              --repository-name $(ECR_REPOSITORY) \
              --image-scanning-configuration scanOnPush=true \
              --region $(AWS_REGION)
            
            # Set lifecycle policy
            POLICY='{
              "rules": [{
                "rulePriority": 1,
                "description": "Remove untagged images older than 14 days",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 14
                },
                "action": {
                  "type": "expire"
                }
              }]
            }'
            
            aws ecr put-lifecycle-policy \
              --repository-name $(ECR_REPOSITORY) \
              --lifecycle-policy-text "$POLICY" \
              --region $(AWS_REGION)
          fi

    - task: AWSShellScript@1
      name: getAccountId
      inputs:
        awsCredentials: 'AWS'
        regionName: $(AWS_REGION)
        scriptType: 'inline'
        inlineScript: |
          # Get AWS Account ID and store it
          export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "Account ID is: $AWS_ACCOUNT_ID"
          # Store for current job
          echo "##vso[task.setvariable variable=AWS_ACCOUNT_ID]$AWS_ACCOUNT_ID"
          # Store for next stage
          echo "##vso[task.setvariable variable=AWS_ACCOUNT_ID;isOutput=true]$AWS_ACCOUNT_ID"

- stage: Build
  displayName: 'Build and Push'
  dependsOn: Infrastructure
  variables:
    AWS_ACCOUNT_ID: $[ stageDependencies.Infrastructure.SetupInfrastructure.outputs['getAccountId.AWS_ACCOUNT_ID'] ]
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push Docker Image'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet
      displayName: 'Install .NET 8 SDK'

    - task: AWSShellScript@1
      inputs:
        awsCredentials: 'AWS'  # AWS Service Connection name
        regionName: $(AWS_REGION)
        scriptType: 'inline'
        inlineScript: |
          # Get account ID again in this stage
          export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "Using AWS Account ID: $AWS_ACCOUNT_ID"
          aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$(AWS_REGION).amazonaws.com
      displayName: 'Login to ECR'

    - script: |
        echo "Current directory: $PWD"
        echo "Build.SourcesDirectory: $(Build.SourcesDirectory)"
        echo "Listing repo contents:"
        ls -la $(Build.SourcesDirectory)
      displayName: 'Show build environment'

    - task: Docker@2
      inputs:
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/ProjectPlanner.CQRS/Dockerfile'
        buildContext: '$(Build.SourcesDirectory)'
        tags: |
          $(ECR_REPOSITORY):$(IMAGE_TAG)
          $(ECR_REPOSITORY):latest
      displayName: 'Build Docker Image'

    - task: AWSShellScript@1
      inputs:
        awsCredentials: 'AWS'  # AWS Service Connection name
        regionName: $(AWS_REGION)
        scriptType: 'inline'
        inlineScript: |
          # Get account ID and full ECR repo URL
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          ECR_URI="$AWS_ACCOUNT_ID.dkr.ecr.$(AWS_REGION).amazonaws.com/$ECR_REPOSITORY"

          echo "ECR URI: $ECR_URI"

          # Authenticate Docker with ECR
          aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$(AWS_REGION).amazonaws.com"

          # Tag and push image with build number
          docker tag "$ECR_REPOSITORY:$IMAGE_TAG" "$ECR_URI:$IMAGE_TAG"
          docker push "$ECR_URI:$IMAGE_TAG"

          # Tag and push as latest
          docker tag "$ECR_REPOSITORY:$IMAGE_TAG" "$ECR_URI:latest"
          docker push "$ECR_URI:latest"
      displayName: 'Push to ECR'

